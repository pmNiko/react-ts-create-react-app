{"version":3,"sources":["hooks/useNewSubForm.tsx","components/Form.tsx","components/List.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["INITIAL_STATE","nick","subMonths","avatar","description","CHANGE_VALUE","formReducer","state","action","type","payload","inputName","inputValue","Form","onNewSub","useReducer","inputValues","dispatch","formState","changeForm","useCallback","clearForm","useNewSubForm","handleChange","evt","target","name","value","onSubmit","preventDefault","placeholder","onChange","onClick","List","subs","children","map","sub","index","src","alt","substring","App","divRef","useRef","useState","setSubs","newSubsNumber","setNewSubsNumber","mapFromApiToSubs","apiResponse","subFromApi","title","albumId","thumbnailUrl","url","useEffect","a","axios","get","then","res","data","slice","fetchSubs","className","ref","newSub","n","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2bb11b6.chunk.js","sourcesContent":["import { useCallback, useReducer } from \"react\"\nimport { PayloadInputsForm, Sub } from \"../types\"\n\ninterface FormState {\n  inputValues: Sub\n}\n\nconst INITIAL_STATE = {\n  nick: \"\",\n  subMonths: 0,\n  avatar: \"\",\n  description: \"\",\n}\n\n// Defined reducer\nexport const CHANGE_VALUE = \"CHANGE_VALUE\"\nexport const CLEAR = \"CLEAR\"\n\ntype FormReducerAction =\n  | {\n      type: typeof CHANGE_VALUE\n      payload: {\n        inputName: string\n        inputValue: string\n      }\n    }\n  | {\n      type: typeof CLEAR\n    }\n\nconst formReducer = (\n  state: FormState[\"inputValues\"],\n  action: FormReducerAction\n) => {\n  switch (action.type) {\n    case CHANGE_VALUE:\n      const { inputName, inputValue } = action.payload\n      return {\n        ...state,\n        [inputName]: inputValue,\n      }\n\n    case \"CLEAR\":\n      return INITIAL_STATE\n\n    default:\n      return state\n  }\n}\n\nexport const useNewSubForm = () => {\n  // return useReducer(formReducer, INITIAL_STATE)\n\n  const [inputValues, dispatch] = useReducer(formReducer, INITIAL_STATE)\n\n  const changeForm = useCallback(\n    (payload: PayloadInputsForm) => dispatch({ type: CHANGE_VALUE, payload }),\n    []\n  )\n  const clearForm = useCallback(() => dispatch({ type: CLEAR }), [])\n\n  return {\n    formState: inputValues,\n    changeForm,\n    clearForm,\n  }\n}\n","import { useNewSubForm, CHANGE_VALUE, CLEAR } from \"../hooks/useNewSubForm\"\nimport { Sub } from \"../types\"\n\ninterface FormProps {\n  onNewSub: (newSub: Sub) => void\n}\n\n/**\n *\n * Component Form for new subscriptors\n *\n */\nconst Form = ({ onNewSub }: FormProps) => {\n  // const [inputValues, setInputValues] = useState<FormState['inputValues']>(INITIAL_STATE);\n  const { formState, changeForm, clearForm } = useNewSubForm()\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault()\n    onNewSub(formState)\n    clearForm()\n  }\n\n  const handleChange = (\n    evt: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value } = evt.target\n    changeForm({ inputName: name, inputValue: value })\n  }\n\n  const { nick, subMonths, avatar, description } = formState\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          value={nick}\n          type=\"text\"\n          name=\"nick\"\n          placeholder=\"nick\"\n          onChange={handleChange}\n        />\n        <input\n          value={subMonths}\n          type=\"number\"\n          name=\"subMonths\"\n          placeholder=\"Sub months\"\n          onChange={handleChange}\n        />\n        <input\n          value={avatar}\n          type=\"text\"\n          name=\"avatar\"\n          placeholder=\"Avatar\"\n          onChange={handleChange}\n        />\n        <textarea\n          value={description}\n          name=\"description\"\n          placeholder=\"A description\"\n          onChange={handleChange}\n        />\n        <button type=\"button\" onClick={clearForm}>\n          Clear the form!\n        </button>\n        <button type=\"submit\">Save new sub!</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Form\n","import { Sub } from \"../types\"\n\ninterface Props {\n  children: JSX.Element\n  subs: Array<Sub>\n}\n\n// const List: React.FC<Props> = ({subs, children}) => {\nconst List = ({ subs, children }: Props) => {\n  const renderList = (): JSX.Element[] => {\n    return subs.map((sub, index) => (\n      <li key={index}>\n        <img src={sub.avatar} alt={`Avatar for ${sub.nick}`} />\n        <h4>\n          {sub.nick} (<small>{sub.subMonths}</small>)\n        </h4>\n        <p>{sub.description?.substring(0, 10)}</p>\n      </li>\n    ))\n  }\n\n  return (\n    <div>\n      <ul>{renderList()}</ul>\n      {children}\n    </div>\n  )\n}\n\nexport default List\n","import axios from \"axios\"\nimport { useEffect, useRef, useState } from \"react\"\nimport \"./App.css\"\nimport Form from \"./components/Form\"\nimport List from \"./components/List\"\nimport { Sub, SubsResponseFromApi } from \"./types\"\n\n// const INITIAL_STATE = [\n//   {\n//     nick: \"Nikolas\",\n//     subMonths: 3,\n//     avatar: \"https://i.pravatar.cc/150?img=70=Nikolas\",\n//     description: \"A description\",\n//   },\n//   {\n//     nick: \"Mario\",\n//     subMonths: 4,\n//     avatar: \"https://i.pravatar.cc/150?img=58=Mario\",\n//   },\n// ]\n\ninterface AppSatate {\n  subs: Array<Sub>\n  newSubsNumber: number\n}\n\nfunction App() {\n  const divRef = useRef<HTMLDivElement>(null)\n  const [subs, setSubs] = useState<AppSatate[\"subs\"]>([])\n  const [newSubsNumber, setNewSubsNumber] =\n    useState<AppSatate[\"newSubsNumber\"]>(0)\n\n  const mapFromApiToSubs = (apiResponse: SubsResponseFromApi): Array<Sub> => {\n    return apiResponse.map((subFromApi) => {\n      const {\n        title: nick,\n        albumId: subMonths,\n        thumbnailUrl: avatar,\n        url: description,\n      } = subFromApi\n\n      return { nick, subMonths, avatar, description }\n    })\n  }\n\n  useEffect(() => {\n    // const fetchSubs = (): Promise<SubsResponseFromApi> => {\n    //   return fetch(\"https://jsonplaceholder.typicode.com/photos\")\n    //     .then((res) => res.json())\n    //     .then((data) => data.slice(0, 10))\n    // }\n    const fetchSubs = async (): Promise<SubsResponseFromApi> => {\n      return await axios\n        .get(\"https://jsonplaceholder.typicode.com/photos\")\n        .then((res) => res.data)\n        .then((data) => data.slice(0, 3))\n    }\n    fetchSubs().then(mapFromApiToSubs).then(setSubs)\n  }, [])\n\n  const handleNewSub = (newSub: Sub): void => {\n    setSubs((subs) => [...subs, newSub])\n    setNewSubsNumber((n) => n + 1)\n  }\n\n  return (\n    <div className=\"App\" ref={divRef}>\n      <h1>Subscriptores</h1>\n      <List subs={subs}>\n        <h1>Hello children</h1>\n      </List>\n      <h4>New subs: {newSubsNumber}</h4>\n      <Form onNewSub={handleNewSub} />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}